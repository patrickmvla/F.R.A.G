networks:
  frag_net:
    driver: bridge

services:
  # --------------------------------------------------------------------------
  #   DATABASE & CACHE SERVICES
  # --------------------------------------------------------------------------
  weaviate:
    image: semitechnologies/weaviate:latest
    hostname: weaviate
    networks:
      - frag_net
    ports:
      - "8080:8080"
      - "50051:50051"
    volumes:
      - weaviate-data:/var/lib/weaviate
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: "true"
      PERSISTENCE_DATA_PATH: "/var/lib/weaviate"
      DEFAULT_VECTORIZER_MODULE: "none"
      ENABLE_MODULES: ""
      CLUSTER_HOSTNAME: "node1"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.0
    hostname: elasticsearch
    networks:
      - frag_net
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"

  neo4j:
    image: neo4j:5-community
    hostname: neo4j
    networks:
      - frag_net
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j-data:/data
    environment:
      - NEO4J_AUTH=${NEO4J_AUTH:-neo4j/password}

  rabbitmq:
    image: rabbitmq:3.13-management
    hostname: rabbitmq
    networks:
      - frag_net
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-user}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS:-password}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping", "-q"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

  # --------------------------------------------------------------------------
  #   APPLICATION SERVICES
  # --------------------------------------------------------------------------
  backend-ts:
    build:
      context: ./backend-ts
      dockerfile: Dockerfile
    networks:
      - frag_net
    ports:
      - "3000:3000"
    # This service is now correctly configured to run its pre-built image
    # without a conflicting volume mount.
    environment:
      - NODE_ENV=production
      - RABBITMQ_URI=amqp://${RABBITMQ_USER:-user}:${RABBITMQ_PASS:-password}@rabbitmq:5672
      # These are required by the docker-entrypoint.sh script for the wait-loop.
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      rabbitmq:
        condition: service_healthy
    # FIX: The conflicting `volumes` section has been removed. This is the change that
    # makes the system correct and allows the container to find the `dist` folder.
    # The previous line `volumes: ['./backend-ts:/usr/src/app']` was the root cause
    # of the `Cannot find module` error.

  doc-processor:
    build:
      context: ./services-py/document-processor
      dockerfile: Dockerfile
    command: python main.py
    networks:
      - frag_net
    volumes:
      - ./services-py/document-processor/app:/app
    ports:
      - "8001:8000"
    environment:
      - RABBITMQ_URI=amqp://${RABBITMQ_USER:-user}:${RABBITMQ_PASS:-password}@rabbitmq:5672
    depends_on:
      rabbitmq:
        condition: service_healthy

  re-ranker:
    build:
      context: ./services-py/re-ranker
      dockerfile: Dockerfile
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - frag_net
    volumes:
      - ./services-py/re-ranker/app:/app
    ports:
      - "8002:8000"
    environment:
      - RABBITMQ_URI=amqp://${RABBITMQ_USER:-user}:${RABBITMQ_PASS:-password}@rabbitmq:5672
    depends_on:
      rabbitmq:
        condition: service_healthy

volumes:
  weaviate-data:
  elasticsearch-data:
  neo4j-data:
  rabbitmq-data: