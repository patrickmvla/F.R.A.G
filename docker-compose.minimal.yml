# docker-compose.minimal.yml
# A minimal test case to isolate the networking issue.

networks:
  test_net:
    driver: bridge

services:
  rabbitmq:
    image: rabbitmq:3.13-management
    hostname: rabbitmq
    networks:
      - test_net
    # Use a named volume to avoid permissions issues.
    volumes:
      - rabbitmq-test-data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password

  backend-ts:
    # We use a simple, well-known image to eliminate your Dockerfile as a variable.
    image: node:20-alpine
    hostname: backend-ts
    networks:
      - test_net
    # Use the simplest dependency: wait for the service to have started.
    # This is less robust than a healthcheck but is a more direct test.
    depends_on:
      - rabbitmq
    # Override the command to keep the container alive for inspection.
    command: tail -f /dev/null

volumes:
  rabbitmq-test-data: